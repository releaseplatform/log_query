#! /usr/bin/env ruby

require 'uri'
require 'descriptive_statistics/safe'
require 'commander/import'
require 'log_query/messages'
require 'log_query/log_entry'
require 'log_query/screen'
require 'log_query/version'

program :name, 'Log Query'
program :version, LogQuery::VERSION
program :description, 'CLI based analytics for heroku logs'

global_option('-g', '--group_by ATTRIBUTE', 'Attribute to group by')
global_option('-m', '--measure ATTRIBUTE', 'Attribute to measure')
global_option('-a', '--average', 'Perform average')
global_option('-p', '--percentile NUMBER', Integer,'Find nth percentile')
global_option('--variance', 'Perform variance')

default_command :run

command :run do |c|
  c.action do |args, options|
   entries = []
   screen = Screen.new
   ARGF.each_line do |line|
     entry = LogEntry.from_heroku_log_line(line)
     entries << entry if entry.message.is_a?(Messages::HerokuRouter)

     screen.reset
     entries.group_by { |e| e.message.send(options.group_by) }.
       map { |k, es| [k, DescriptiveStatistics::Stats.new(es.map { |e| e.message.send(options.measure) })] }.
       map do |k, stats|
         line = "#{k}: "
         line += "mean: #{stats.mean.round(2)} " if options.average
         line += "variance: #{stats.variance.round(2)} " if options.variance
         line += "#{options.percentile}th: #{stats.percentile(options.percentile).round(2)} " if options.percentile
         screen.line(line)
       end

     screen.draw
   end
  end
end

